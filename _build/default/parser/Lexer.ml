# 2 "parser/Lexer.mll"
 
    open Parser
    exception Error of string

# 7 "parser/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\187\255\188\255\189\255\190\255\078\000\090\000\114\000\
    \197\255\198\255\199\255\200\255\201\255\202\255\203\255\204\255\
    \100\000\005\000\013\000\213\255\214\255\039\000\216\255\217\255\
    \218\255\003\000\017\000\222\255\223\255\061\000\136\000\036\000\
    \133\000\045\000\049\000\056\000\138\000\072\000\060\000\146\000\
    \068\000\063\000\067\000\097\000\096\000\107\000\255\255\128\000\
    \125\000\143\000\254\255\137\000\253\255\138\000\250\255\136\000\
    \140\000\141\000\252\255\158\000\251\255\162\000\142\000\249\255\
    \147\000\162\000\248\255\153\000\151\000\155\000\159\000\153\000\
    \168\000\247\255\159\000\157\000\246\255\171\000\176\000\175\000\
    \171\000\244\255\167\000\243\255\176\000\177\000\169\000\242\255\
    \183\000\181\000\241\255\166\000\240\255\238\255\168\000\168\000\
    \237\255\169\000\236\255\235\255\181\000\167\000\187\000\181\000\
    \234\255\180\000\175\000\233\255\195\000\230\255\185\000\000\000\
    \183\000\194\000\001\000\192\000\188\000\183\000\231\255\199\000\
    \191\000\186\000\229\255\228\255\191\000\227\255\187\000\225\255\
    \200\000\198\000\226\255\206\000\224\255\220\255\210\255\219\255\
    \191\255\075\000\192\255\211\255\212\255\206\255\004\001\014\001\
    \089\001\132\001\063\001\253\255\040\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\060\000\060\000\059\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \050\000\048\000\046\000\255\255\255\255\040\000\255\255\255\255\
    \255\255\047\000\068\000\255\255\255\255\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\010\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\034\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\062\000\059\000\
    \255\255\061\000\255\255\255\255\002\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\137\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\147\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\000\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\026\000\020\000\000\000\135\000\
    \015\000\014\000\022\000\024\000\009\000\023\000\016\000\021\000\
    \006\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\017\000\008\000\018\000\019\000\025\000\141\000\
    \134\000\044\000\043\000\042\000\041\000\040\000\039\000\038\000\
    \037\000\036\000\139\000\140\000\035\000\133\000\034\000\033\000\
    \032\000\136\000\031\000\030\000\029\000\138\000\137\000\150\000\
    \028\000\027\000\000\000\013\000\000\000\012\000\000\000\112\000\
    \115\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\011\000\142\000\010\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \142\000\108\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\128\000\099\000\
    \097\000\094\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\127\000\088\000\084\000\126\000\
    \064\000\061\000\053\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\048\000\045\000\046\000\
    \047\000\143\000\144\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\121\000\101\000\051\000\
    \092\000\120\000\049\000\070\000\050\000\052\000\056\000\100\000\
    \091\000\055\000\059\000\057\000\119\000\054\000\069\000\058\000\
    \002\000\068\000\060\000\062\000\067\000\063\000\065\000\066\000\
    \082\000\077\000\074\000\071\000\072\000\073\000\075\000\076\000\
    \078\000\079\000\080\000\081\000\083\000\085\000\086\000\087\000\
    \089\000\090\000\093\000\095\000\096\000\098\000\105\000\102\000\
    \103\000\104\000\106\000\107\000\110\000\111\000\113\000\109\000\
    \114\000\116\000\117\000\118\000\124\000\123\000\122\000\125\000\
    \131\000\129\000\130\000\132\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \000\000\149\000\000\000\255\255\000\000\000\000\000\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\148\000\000\000\000\000\000\000\143\000\000\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\255\255\025\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\018\000\000\000\026\000\000\000\000\000\
    \000\000\021\000\000\000\000\000\000\000\137\000\021\000\148\000\
    \000\000\000\000\255\255\000\000\255\255\000\000\255\255\111\000\
    \114\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \006\000\031\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\029\000\033\000\
    \034\000\035\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\029\000\037\000\038\000\029\000\
    \040\000\041\000\042\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\043\000\044\000\045\000\
    \043\000\007\000\006\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\030\000\032\000\047\000\
    \036\000\030\000\048\000\039\000\049\000\051\000\053\000\032\000\
    \036\000\053\000\055\000\056\000\030\000\053\000\039\000\057\000\
    \000\000\039\000\059\000\061\000\039\000\062\000\064\000\065\000\
    \067\000\068\000\069\000\070\000\071\000\072\000\074\000\075\000\
    \077\000\078\000\079\000\080\000\082\000\084\000\085\000\086\000\
    \088\000\089\000\091\000\094\000\095\000\097\000\100\000\101\000\
    \102\000\103\000\105\000\106\000\108\000\110\000\112\000\108\000\
    \113\000\115\000\116\000\117\000\119\000\120\000\121\000\124\000\
    \126\000\128\000\129\000\131\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \255\255\146\000\255\255\137\000\255\255\255\255\255\255\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\146\000\255\255\255\255\255\255\143\000\255\255\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\143\000\143\000\143\000\143\000\143\000\143\000\143\000\
    \143\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\144\000\144\000\144\000\144\000\
    \144\000\144\000\144\000\144\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
    \145\000\145\000\145\000\145\000\145\000\145\000\145\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\146\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 13 "parser/Lexer.mll"
                                    ( AND )
# 254 "parser/Lexer.ml"

  | 1 ->
# 14 "parser/Lexer.mll"
                                    ( BLUE )
# 259 "parser/Lexer.ml"

  | 2 ->
# 15 "parser/Lexer.mll"
                                    ( BOOL_TYP )
# 264 "parser/Lexer.ml"

  | 3 ->
# 16 "parser/Lexer.mll"
                                    ( COLOR )
# 269 "parser/Lexer.ml"

  | 4 ->
# 17 "parser/Lexer.mll"
                                    ( COORD )
# 274 "parser/Lexer.ml"

  | 5 ->
# 18 "parser/Lexer.mll"
                                    ( COS )
# 279 "parser/Lexer.ml"

  | 6 ->
# 19 "parser/Lexer.mll"
                                    ( DRAW )
# 284 "parser/Lexer.ml"

  | 7 ->
# 20 "parser/Lexer.mll"
                                    ( ELSE )
# 289 "parser/Lexer.ml"

  | 8 ->
# 21 "parser/Lexer.mll"
                                    ( BOOL(false) )
# 294 "parser/Lexer.ml"

  | 9 ->
# 22 "parser/Lexer.mll"
                                    ( FLOOR )
# 299 "parser/Lexer.ml"

  | 10 ->
# 23 "parser/Lexer.mll"
                                    ( FOR )
# 304 "parser/Lexer.ml"

  | 11 ->
# 24 "parser/Lexer.mll"
                                    ( FOREACH )
# 309 "parser/Lexer.ml"

  | 12 ->
# 25 "parser/Lexer.mll"
                                    ( FROM )
# 314 "parser/Lexer.ml"

  | 13 ->
# 26 "parser/Lexer.mll"
                                    ( GREEN )
# 319 "parser/Lexer.ml"

  | 14 ->
# 27 "parser/Lexer.mll"
                                    ( HEAD )
# 324 "parser/Lexer.ml"

  | 15 ->
# 28 "parser/Lexer.mll"
                                    ( IF )
# 329 "parser/Lexer.ml"

  | 16 ->
# 29 "parser/Lexer.mll"
                                    ( IN )
# 334 "parser/Lexer.ml"

  | 17 ->
# 30 "parser/Lexer.mll"
                                    ( INT_TYP )
# 339 "parser/Lexer.ml"

  | 18 ->
# 31 "parser/Lexer.mll"
                                    ( LIST )
# 344 "parser/Lexer.ml"

  | 19 ->
# 32 "parser/Lexer.mll"
                                    ( NOT )
# 349 "parser/Lexer.ml"

  | 20 ->
# 33 "parser/Lexer.mll"
                                    ( OR )
# 354 "parser/Lexer.ml"

  | 21 ->
# 34 "parser/Lexer.mll"
                                    ( PIXEL )
# 359 "parser/Lexer.ml"

  | 22 ->
# 35 "parser/Lexer.mll"
                                    ( PRINT )
# 364 "parser/Lexer.ml"

  | 23 ->
# 36 "parser/Lexer.mll"
                                    ( REAL_TYP )
# 369 "parser/Lexer.ml"

  | 24 ->
# 37 "parser/Lexer.mll"
                                    ( REAL_OF_INT )
# 374 "parser/Lexer.ml"

  | 25 ->
# 38 "parser/Lexer.mll"
                                    ( RED )
# 379 "parser/Lexer.ml"

  | 26 ->
# 39 "parser/Lexer.mll"
                                    ( SET )
# 384 "parser/Lexer.ml"

  | 27 ->
# 40 "parser/Lexer.mll"
                                    ( SIN )
# 389 "parser/Lexer.ml"

  | 28 ->
# 41 "parser/Lexer.mll"
                                    ( STEP )
# 394 "parser/Lexer.ml"

  | 29 ->
# 42 "parser/Lexer.mll"
                                    ( TAIL )
# 399 "parser/Lexer.ml"

  | 30 ->
# 43 "parser/Lexer.mll"
                                    ( TO )
# 404 "parser/Lexer.ml"

  | 31 ->
# 44 "parser/Lexer.mll"
                                    ( BOOL(true) )
# 409 "parser/Lexer.ml"

  | 32 ->
# 45 "parser/Lexer.mll"
                                    ( Y )
# 414 "parser/Lexer.ml"

  | 33 ->
# 46 "parser/Lexer.mll"
                                    ( X )
# 419 "parser/Lexer.ml"

  | 34 ->
# 47 "parser/Lexer.mll"
                                    ( PI )
# 424 "parser/Lexer.ml"

  | 35 ->
# 48 "parser/Lexer.mll"
                                    ( OPEN )
# 429 "parser/Lexer.ml"

  | 36 ->
# 49 "parser/Lexer.mll"
                                    ( CLOSE )
# 434 "parser/Lexer.ml"

  | 37 ->
# 50 "parser/Lexer.mll"
                                    ( ADD )
# 439 "parser/Lexer.ml"

  | 38 ->
# 51 "parser/Lexer.mll"
                                    ( SUB )
# 444 "parser/Lexer.ml"

  | 39 ->
# 52 "parser/Lexer.mll"
                                    ( MUL )
# 449 "parser/Lexer.ml"

  | 40 ->
# 53 "parser/Lexer.mll"
                                    ( DIV )
# 454 "parser/Lexer.ml"

  | 41 ->
# 54 "parser/Lexer.mll"
                                    ( MOD )
# 459 "parser/Lexer.ml"

  | 42 ->
# 55 "parser/Lexer.mll"
                                    ( EQ )
# 464 "parser/Lexer.ml"

  | 43 ->
# 56 "parser/Lexer.mll"
                                    ( NEQ )
# 469 "parser/Lexer.ml"

  | 44 ->
# 57 "parser/Lexer.mll"
                                    ( LEQ )
# 474 "parser/Lexer.ml"

  | 45 ->
# 58 "parser/Lexer.mll"
                                    ( GEQ )
# 479 "parser/Lexer.ml"

  | 46 ->
# 59 "parser/Lexer.mll"
                                    ( LT )
# 484 "parser/Lexer.ml"

  | 47 ->
# 60 "parser/Lexer.mll"
                                    ( GT )
# 489 "parser/Lexer.ml"

  | 48 ->
# 61 "parser/Lexer.mll"
                                    ( COLON )
# 494 "parser/Lexer.ml"

  | 49 ->
# 62 "parser/Lexer.mll"
                                    ( CONS )
# 499 "parser/Lexer.ml"

  | 50 ->
# 63 "parser/Lexer.mll"
                                    ( DOT )
# 504 "parser/Lexer.ml"

  | 51 ->
# 64 "parser/Lexer.mll"
                                    ( L_PAR )
# 509 "parser/Lexer.ml"

  | 52 ->
# 65 "parser/Lexer.mll"
                                    ( R_PAR )
# 514 "parser/Lexer.ml"

  | 53 ->
# 66 "parser/Lexer.mll"
                                    ( L_SQ_BRK )
# 519 "parser/Lexer.ml"

  | 54 ->
# 67 "parser/Lexer.mll"
                                    ( R_SQ_BRK )
# 524 "parser/Lexer.ml"

  | 55 ->
# 68 "parser/Lexer.mll"
                                    ( L_CUR_BRK )
# 529 "parser/Lexer.ml"

  | 56 ->
# 69 "parser/Lexer.mll"
                                    ( R_CUR_BRK )
# 534 "parser/Lexer.ml"

  | 57 ->
# 70 "parser/Lexer.mll"
                                    ( COMMA )
# 539 "parser/Lexer.ml"

  | 58 ->
# 71 "parser/Lexer.mll"
                                    ( SEMICOLON )
# 544 "parser/Lexer.ml"

  | 59 ->
let
# 72 "parser/Lexer.mll"
                                 s
# 550 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 72 "parser/Lexer.mll"
                                    ( ID(s) )
# 554 "parser/Lexer.ml"

  | 60 ->
let
# 73 "parser/Lexer.mll"
                  i
# 560 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 73 "parser/Lexer.mll"
                                    ( INT(int_of_string i))
# 564 "parser/Lexer.ml"

  | 61 ->
let
# 74 "parser/Lexer.mll"
                      i
# 570 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 74 "parser/Lexer.mll"
                                    ( INT(int_of_string i))
# 574 "parser/Lexer.ml"

  | 62 ->
let
# 75 "parser/Lexer.mll"
                               r
# 580 "parser/Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 75 "parser/Lexer.mll"
                                    ( REAL(float_of_string r))
# 584 "parser/Lexer.ml"

  | 63 ->
# 76 "parser/Lexer.mll"
                                    (Lexing.new_line lexbuf; token lexbuf)
# 589 "parser/Lexer.ml"

  | 64 ->
# 77 "parser/Lexer.mll"
                                    (commentary lexbuf)
# 594 "parser/Lexer.ml"

  | 65 ->
# 78 "parser/Lexer.mll"
                                    (token lexbuf)
# 599 "parser/Lexer.ml"

  | 66 ->
# 79 "parser/Lexer.mll"
                                    ( Lexing.new_line lexbuf ; token lexbuf )
# 604 "parser/Lexer.ml"

  | 67 ->
# 80 "parser/Lexer.mll"
                                    ( EOF )
# 609 "parser/Lexer.ml"

  | 68 ->
let
# 81 "parser/Lexer.mll"
           s
# 615 "parser/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 81 "parser/Lexer.mll"
                                    ( let pos = Lexing.lexeme_start_p lexbuf in raise (Error(Format.sprintf "Line %d, char %d ,Read: '%c'. It is not an acceptable character" pos.pos_lnum (pos.pos_cnum - pos.pos_bol +1) s)) )
# 619 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and commentary lexbuf =
   __ocaml_lex_commentary_rec lexbuf 146
and __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "parser/Lexer.mll"
                (Lexing.new_line lexbuf; commentary lexbuf)
# 631 "parser/Lexer.ml"

  | 1 ->
# 85 "parser/Lexer.mll"
                ( token lexbuf )
# 636 "parser/Lexer.ml"

  | 2 ->
# 86 "parser/Lexer.mll"
        ( commentary lexbuf )
# 641 "parser/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_commentary_rec lexbuf __ocaml_lex_state

;;

